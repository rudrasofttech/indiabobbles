var game = new Phaser.Game(document.getElementById("gameDiv").offsetWidth, document.getElementById("gameDiv").offsetHeight, Phaser.AUTO, "gameDiv"), score = 0, showhighscorenotification = !0, die = !1, leftclicked = !1, rightclicked = !1, playerface = "right", movedirection = "", meteorclosenesslimit = 50, meteorcloseness = 500, meteorclosenessincreaserate = 1, meteoraccincreaserate = 5, initState = { preload: function () { game.load.image("splashscreen", "images/Splash-Screen.jpg"), game.load.image("background", "images/BG_1366x768.jpg"), game.load.spritesheet("player", "images/Rover_Sprites.png", 95, 120), game.load.spritesheet("explode", "images/Efx_Explosion_v02.png", 50, 76), game.load.spritesheet("dai", "images/Sprites_BlueGem_42x50.png", 42, 50), game.load.spritesheet("reddai", "images/redgem-sprite.png", 44, 50), game.load.spritesheet("bomb", "images/Meteor_Sprites.png", 48, 95), game.load.image("ground", "images/Ground_1366x768.png"), game.load.image("dirt", "images/dirtlayer.png"), game.load.image("scorepanel", "images/score-panel.png"), game.load.image("scorepopup", "images/popup.png"), game.load.spritesheet("left", "images/left.png", 98, 103), game.load.spritesheet("right", "images/right.png", 98, 103), game.load.spritesheet("pause", "images/pause.png", 76, 79), game.load.spritesheet("play", "images/play.png", 76, 79), game.load.spritesheet("fullvolume", "images/fullvolume.png", 77, 77), game.load.spritesheet("novolume", "images/novolume.png", 77, 77), playsound && (game.load.audio("rovermoving", "sound/Rover moving new 3.mp3"), game.load.audio("gameplay", "sound/Sci Fi theme 4.mp3"), game.load.audio("gameend", "sound/game ending.mp3"), game.load.audio("collectinggem", "sound/Gem Collecting 3.mp3"), game.load.audio("explosionsound", "sound/explosion 2.mp3"), game.load.audio("startbutton", "sound/Start button.mp3")) }, create: function () { this.background = this.game.add.sprite(game.world.centerX, game.world.centerY, "splashscreen"), this.background.width = splashscreenwidth, this.background.height = splashscreenheight, this.background.anchor.setTo(.5, .5), this.startbutton = game.add.audio("startbutton"), score = 0; var e = subtextobj.text, t = subtextobj.fontstyle, i = game.add.text(game.world.centerX, subtextobj.margintop, e, t); i.anchor.setTo(.5, .5), i.alpha = 0, game.input.onDown.addOnce(function () { playsound && 1 == localStorage.volume && this.startbutton.play(); var e = game.add.tween(i).to({ alpha: 1 }, 3e3, "Linear", !0); e.onComplete.add(function () { game.state.start("main") }, this) }, this) } }, mainState = { preload: function () { }, create: function () { for (die = !1, score = 0, showhighscorenotification = !0, meteoracceleration = 200, game.physics.startSystem(Phaser.Physics.ARCADE), this.rovermoving = game.add.audio("rovermoving"), this.gameplay = game.add.audio("gameplay"), playsound && 1 == localStorage.volume && this.gameplay.play("", 0, .3, !0, !0), this.gameend = game.add.audio("gameend"), this.collectinggem = game.add.audio("collectinggem"), this.explosionsound = game.add.audio("explosionsound"), this.background = this.game.add.sprite(0, 0, "background"), this.background.width = game.world.width, this.background.height = game.world.height + 25, this.play = game.add.button(game.world.width - playbtnwidth, 10, "play", null, this, 0, 0, 0, 0), this.play.width = playbtnwidth, this.play.height = playbtnheight, this.play.visible = !1, this.pause = game.add.button(game.world.width - playbtnwidth, 10, "pause", null, this, 0, 0, 0, 0), this.pause.width = playbtnwidth, this.pause.height = playbtnheight, this.pause.events.onInputUp.add(function () { this.setPause() }, this), this.fullvolume = game.add.button(game.world.width - volumebtnwidth - this.pause.width, 10, "fullvolume", null, this, 0, 0, 0, 0), this.fullvolume.width = volumebtnwidth, this.fullvolume.height = volumebtnheight, this.fullvolume.events.onInputUp.add(function () { localStorage.volume = 0, this.fullvolume.visible = !1, this.novolume.visible = !0, this.gameplay.pause() }, this), this.novolume = game.add.button(game.world.width - volumebtnwidth - this.pause.width, 10, "novolume", null, this, 0, 0, 0, 0), this.novolume.width = volumebtnwidth, this.novolume.height = volumebtnheight, this.novolume.events.onInputUp.add(function () { localStorage.volume = 1, this.fullvolume.visible = !0, this.novolume.visible = !1, this.gameplay.resume() }, this), "desktop" == runningdevice ? 0 == localStorage.volume ? (this.fullvolume.visible = !1, this.novolume.visible = !0) : (this.fullvolume.visible = !0, this.novolume.visible = !1) : "mobile" == runningdevice && (this.fullvolume.visible = !1, this.novolume.visible = !1), game.input.onDown.add(function (e) { game.paused && (game.paused = !1, this.play.visible = !1, this.pause.visible = !0, playsound && 1 == localStorage.volume && this.gameplay.play()) }, this), game.input.onUp.add(function () { movedirection = "" }), this.ground = this.game.add.sprite(0, game.world.height - groundheight, "ground"), this.ground.width = game.world.width, this.ground.height = groundheight, game.physics.arcade.enable(this.ground), this.ground.body.enable = !0, this.ground.body.immovable = !0, this.ground.body.allowGravity = !1, this.player = this.game.add.sprite(game.world.centerX, game.world.height - (playerheight / 2 + this.ground.height), "player", 1), this.player.width = playerwidth, this.player.height = playerheight, this.player.anchor.setTo(.5, .5), framesright = [], i = 0; i < 24; i++) framesright.push(i); for (this.player.animations.add("walkright", framesright, 50, !0, !0), framesleft = [], i = 25; i < 48; i++) framesleft.push(i); for (this.player.animations.add("walkleft", framesleft, 50, !0, !0), framesdestoryright = [], i = 97; i < 108; i++) framesdestoryright.push(i); var e = this.player.animations.add("destoryright", framesdestoryright, 50, !0, !0); for (e.onComplete.add(function (e, t) { this.showCasting() }, this), framesdestoryleft = [], i = 121; i < 132; i++) framesdestoryleft.push(i); var t = this.player.animations.add("destoryleft", framesdestoryleft, 50, !0, !0); t.onComplete.add(function (e, t) { this.showCasting() }, this), this.player.animations.add("standingright", [1], 50, !0, !0), this.player.animations.play("standingright", 1, !0), this.dirt = this.game.add.sprite(0, game.world.height - (groundheight + 9), "dirt"), this.dirt.width = game.world.width, game.physics.arcade.enable(this.player), this.player.body.gravity.y = 100, this.player.body.collideWorldBounds = !0, this.player.body.checkCollision.down = !0, this.cursor = this.game.input.keyboard.createCursorKeys(), this.bombs = game.add.group(), this.bombs.enableBody = !0, this.bombs.physicsBodyType = Phaser.Physics.ARCADE, this.gems = game.add.group(), this.gems.enableBody = !0, this.gems.physicsBodyType = Phaser.Physics.ARCADE, this.explosions = game.add.group(), game.time.events.loop(350, this.createBomb, this), this.scorepanel = this.game.add.sprite(game.world.width - (scorepanelwidth + this.pause.width + this.fullvolume.width + 10), 10, "scorepanel"), this.scorepanel.width = scorepanelwidth, this.scorepanel.height = scorepanelheight, this.labelScore = this.game.add.text(this.scorepanel.x + 15, this.scorepanel.y + labelscorestyle.margintop, "0", labelscorestyle.fontstyle), this.notifypopup = game.add.text(game.world.centerX, notifypopupstyle.margintop, "", notifypopupstyle.fontstyle), this.notifypopup.anchor.setTo(.5, .5), this.notifypopup.alpha = 0, localStorage.highscore > 0 && this.labelScore.setText("Beat " + localStorage.highscore), "mobile" == runningdevice && (this.leftpaddle = this.game.add.button(5, game.world.height - 105, "left", null, this, 0, 0, 0, 0), this.leftpaddle.alpha = .5, this.leftpaddle.events.onInputDown.add(function () { leftclicked = !0, rightclicked = !1 }, this), this.leftpaddle.events.onInputUp.add(function () { leftclicked = !1 }, this), this.rightpaddle = this.game.add.button(game.world.width - 100, game.world.height - 105, "right", null, this, 0, 0, 0, 0), this.rightpaddle.alpha = .5, this.rightpaddle.events.onInputDown.add(function () { rightclicked = !0, leftclicked = !1 }, this), this.rightpaddle.events.onInputUp.add(function () { rightclicked = !1 }, this)) }, setPause: function () { this.gameplay.stop(), game.paused = !0, this.pause.visible = !1, this.play.visible = !0 }, showCasting: function () { playsound && 1 == localStorage.volume && this.gameend.play("", 0, 1, !1, !0); var e = game.add.sprite(game.world.centerX, game.world.centerY, "scorepopup"); e.width = scorepopupwidth, e.height = scorepopupheight, e.anchor.setTo(.5, .5); var t = score + "", i = { font: "100px Trebuchet MS, Impact, Arial", fill: "#fff", align: "center" }, a = game.add.text(game.world.centerX, game.world.centerY + 25, t, i); a.anchor.setTo(.5, .5), this.scorepanel.kill(), this.labelScore.text = "", this.pause.visible = !1, this.fullvolume.visible = !1, this.novolume.visible = !1, game.input.onDown.addOnce(function () { this.gameend.stop(), game.state.start("main") }, this) }, movePlayer: function () { die ? (this.rovermoving.volume = 0, this.player.body.velocity.x = 0, this.player.body.velocity.y = 0) : null != this.player && ("left" == movedirection ? (this.rovermoving.volume = .5, this.player.body.velocity.x = -roverdefaultspeed - score < -rovermaxspeed ? -rovermaxspeed : -roverdefaultspeed - score, this.player.animations.play("walkleft", 12, !0), playerface = "left") : "right" == movedirection ? (this.rovermoving.volume = .5, this.player.body.velocity.x = roverdefaultspeed + score > rovermaxspeed ? rovermaxspeed : roverdefaultspeed + score, this.player.animations.play("walkright", 12, !0), playerface = "right") : (this.rovermoving.volume = 0, this.player.body.velocity.x = 0, this.player.animations.stop(null, !0))) }, update: function () { game.physics.arcade.collide(this.player, this.ground), game.physics.arcade.collide(this.gems, this.ground), game.physics.arcade.overlap(this.player, this.gems, this.playerCollisionWithGem, null, this), game.physics.arcade.overlap(this.bombs, this.ground, this.bombCollisionWithGround, null, this), game.physics.arcade.collide(this.player, this.bombs, this.bombCollisionWithPlayer, null, this), game.physics.arcade.overlap(this.player, this.explosions), pd = game.input.pointer1.position, movedirection = this.cursor.left.isDown || game.input.pointer1.isDown && pd.x > 0 && pd.x < 200 ? "left" : this.cursor.right.isDown || game.input.pointer1.isDown && pd.x > game.world.width - 200 && pd.x < game.world.width ? "right" : "", this.movePlayer() }, createBomb: function () { if (!die) { var e = Math.floor(Math.random() * game.world.width + 1), t = this.bombs.create(e, -100, "bomb", 1); for (t.width = bombwidth, t.height = bombheight, t.anchor.setTo(.5, .5), game.physics.arcade.enable(t), maxmeteoracceleration > meteoracceleration && (meteoracceleration += meteoraccincreaserate), t.body.gravity.y = meteorspeed, t.body.acceleration.y = meteoracceleration, t.body.collideWorldBounds = !0, t.checkWorldBounds = !0, t.outOfBoundsKill = !0, bombanim = [], i = 1; i < 5; i++) bombanim.push(i); t.animations.add("burning", bombanim, 50, !0, !0), t.animations.play("burning", 12, !0) } }, playerCollisionWithGem: function (e, t) { playsound && 1 == localStorage.volume && this.collectinggem.play("", 0, .5, !1, !0), score += t.score, localStorage.highscore > score ? this.labelScore.text = score + " / " + localStorage.highscore : this.labelScore.text = score, parseInt(score, 10) > parseInt(localStorage.highscore, 10) && (localStorage.highscore = score, showhighscorenotification && (this.notifypopup.setText("New Highscore!"), this.notifypopup.alpha = 1, showhighscorenotification = !1, game.add.tween(this.notifypopup).to({ alpha: 0 }, 3e3, "Linear", !0))), t.kill(), t.destroy() }, bombCollisionWithGround: function (e, t) { var a = this.explosions.create(t.x, e.y, "explode", 1); for (a.anchor.setTo(.5, 1), t.kill(), xplframes = [], i = 1; i < 18; i++) xplframes.push(i); xplanim = a.animations.add("xplode", xplframes, 50, !0, !0), a.animations.play("xplode", 24, !1), xplanim.onComplete.add(function (e, t) { e.kill(); var a = Math.floor(10 * Math.random() + 1); if (a % 5 == 0) if (Math.floor(5 * Math.random() + 1) % 5 != 0) { var o = this.gems.create(e.x, e.y, "dai", 1); for (o.score = 1, o.width = gemwidth, o.height = gemheight, o.anchor.setTo(.5, 1), sparkleframes = [], i = 1; i < 25; i++) sparkleframes.push(i); o.animations.add("sparkle", sparkleframes, 50, !0, !0), o.animations.play("sparkle", 12, !0) } else { var o = this.gems.create(e.x, e.y, "reddai", 1); o.score = 10, o.width = gemwidth, o.height = gemheight, o.anchor.setTo(.5, 1); var s = []; for (i = 1; i < 18; i++) s.push(i); o.animations.add("redsparkle", s, 50, !0, !0), o.animations.play("redsparkle", 12, !0) } }, this) }, bombCollisionWithPlayer: function (e, t) { t.kill(), t = null, die || (die = !0, this.gameplay.stop(), playsound && 1 == localStorage.volume && this.explosionsound.play("", 0, .5, !1, !1), "left" == playerface ? this.player.animations.play("destoryleft", 8, !1) : "right" == playerface && this.player.animations.play("destoryright", 8, !1)) }, explosionCollisionWithPlayer: function (e, t) { }, restartGame: function () { game.state.start("init", !0, !0) } }; game.state.add("main", mainState), game.state.add("init", initState), game.state.start("init");